(()=>{"use strict";class e{constructor(e){this.name=e,this.arrayOfTodos=[]}}function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function n(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(e){t(1,arguments);var r=n(e);return r.setHours(0,0,0,0),r}function o(e,n){t(2,arguments);var o=r(e),a=r(n);return o.getTime()===a.getTime()}function a(e){return t(1,arguments),o(e,Date.now())}Math.pow(10,8);var c=36e5;function i(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function l(e,n){t(1,arguments);var r=n||{},o=null==r.additionalDigits?2:i(r.additionalDigits);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,c=p(e);if(c.date){var l=f(c.date,o);a=g(l.restDateString,l.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var u,s=a.getTime(),d=0;if(c.time&&(d=h(c.time),isNaN(d)))return new Date(NaN);if(!c.timezone){var m=new Date(s+d),y=new Date(0);return y.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),y.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),y}return u=b(c.timezone),isNaN(u)?new Date(NaN):new Date(s+d+u)}var u={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},s=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,d=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,m=/^([+-])(\d{2})(?::?(\d{2}))?$/;function p(e){var t,n={},r=e.split(u.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],u.timeZoneDelimiter.test(n.date)&&(n.date=e.split(u.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=u.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}function f(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}function g(e,t){if(null===t)return new Date(NaN);var n=e.match(s);if(!n)return new Date(NaN);var r=!!n[4],o=y(n[1]),a=y(n[2])-1,c=y(n[3]),i=y(n[4]),l=y(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,i,l)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,i,l):new Date(NaN);var u=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(C[t]||(N(e)?29:28))}(t,a,c)&&function(e,t){return t>=1&&t<=(N(e)?366:365)}(t,o)?(u.setUTCFullYear(t,a,Math.max(o,c)),u):new Date(NaN)}function y(e){return e?parseInt(e):1}function h(e){var t=e.match(d);if(!t)return NaN;var n=v(t[1]),r=v(t[2]),o=v(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*c+6e4*r+1e3*o:NaN}function v(e){return e&&parseFloat(e.replace(",","."))||0}function b(e){if("Z"===e)return 0;var t=e.match(m);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*c+6e4*o):NaN}var C=[31,null,31,30,31,30,31,31,30,31,30,31];function N(e){return e%400==0||e%4==0&&e%100!=0}function S(e,r){t(2,arguments);var o=n(e),a=n(r);return o.getTime()>a.getTime()}let E=[];function x(){document.querySelector(".projects").textContent="",E.forEach((e=>{let t=0;const n=document.createElement("div");n.className="project",n.textContent=e.name;const r=document.createElement("button");r.classList.add("project__btn"),r.textContent="x",r.addEventListener("click",(()=>{var n;document.querySelector(".create-button").textContent="",n=e,E=E.filter((e=>e!==n)),localStorage.setItem("projects",JSON.stringify(E)),x(),document.querySelector(".content").textContent="",t=1})),n.addEventListener("click",(()=>{0==t&&k(e)})),n.appendChild(r),"Inbox"!==e.name&&document.querySelector(".projects").appendChild(n)}))}function T(){document.querySelector(".content").textContent="",document.querySelector(".create-button").textContent="";let e=document.createElement("div");e.className="today",j("Today"),E.forEach((e=>{for(let t in e.arrayOfTodos)e.arrayOfTodos[t]&&a(l(e.arrayOfTodos[t].date))&&k(e,t)})),document.querySelector(".today").appendChild(e)}function D(){document.querySelector(".content").textContent="",document.querySelector(".create-button").textContent="";let e=document.createElement("div");e.className="upcoming",j("Upcoming"),E.forEach((e=>{for(let t=1;t<e.arrayOfTodos.length;t++)S(l(e.arrayOfTodos[t].date),new Date)&&k(e,t,"upcoming")})),document.querySelector(".upcoming").appendChild(e)}function k(e,t,n){t||(document.querySelector(".content").textContent="",document.querySelector(".create-button").textContent="",j(e));for(let r=0;r<e.arrayOfTodos.length;r++){const o=document.createElement("div");o.className="task";const a=document.createElement("div");a.textContent="",a.className="task__checkbox",o.appendChild(a);const c=document.createElement("div");c.textContent=e.arrayOfTodos[r].name,c.className="task__name",o.appendChild(c);const i=document.createElement("div");i.textContent="Project: "+e.name,i.className="task__origin",o.appendChild(i);const l=document.createElement("div");l.textContent=e.arrayOfTodos[r].taskDescription,l.className="task__taskDescription",o.appendChild(l);const u=document.createElement("div");switch(o.appendChild(u),u.className="task__date",u.textContent=e.arrayOfTodos[r].date,e.arrayOfTodos[r].priority){case"1":a.style.background="red";break;case"2":a.style.background="orange";break;case"3":a.style.background="yellow";break;case"0":a.style.background="white"}a.addEventListener("click",(()=>{var o;o=r,e.arrayOfTodos.splice(o,1),localStorage.setItem("projects",JSON.stringify(E)),t?t&&"upcoming"==n?D():T():k(e)})),t?t==r&&document.querySelector(".content").appendChild(o):document.querySelector(".content").appendChild(o)}t||q(e),localStorage.setItem("projects",JSON.stringify(E))}function j(e){e.name?document.querySelector(".project-name").textContent=e.name:document.querySelector(".project-name").textContent=e}function w(e){return E.filter((t=>t.name==e)).length>0}function q(e){let t=document.createElement("button");document.querySelector(".create-button").appendChild(t),t.textContent="Create todo",t.className="create-button__btn",t.addEventListener("click",(()=>{!function(e){let t=document.querySelector(".popup-container");t.style.transform="scale(1)",document.body.addEventListener("click",(function(e){e.target==t&&(t.style.transform="scale(0)")})),document.querySelector(".form__submit-button").addEventListener("click",_,!1),document.querySelector(".form__submit-button").parameter=e}(e)}))}function _(e){let t=document.getElementById("taskname").value,n=document.getElementById("description").value,r=document.getElementById("date").value,o=document.getElementById("priority").value;if(r=new Date(r),t){let a=function(e,t,n,r){return{name:e,description:t,date:n,priority:r}}(t,n,r,o);e.currentTarget.parameter.arrayOfTodos.push(a),localStorage.setItem("projects",JSON.stringify(E)),document.querySelector(".popup-container").style.transform="scale(0)",k(e.currentTarget.parameter)}else alert("Enter task name")}"projects"in localStorage&&(E=JSON.parse(localStorage.getItem("projects")||[]),console.log(E)),function(){j("Inbox");let t=new e("Inbox");0==E.filter((e=>"Inbox"==e.name)).length&&E.push(t),q(t),localStorage.setItem("projects",JSON.stringify(E)),E.filter((e=>"Inbox"==e.name)).length>0?k(E[0]):k(t),document.querySelector(".inbox").addEventListener("click",(()=>{console.log(E),E.filter((e=>"Inbox"==e.name)).length>0?k(E[0]):k(t)}))}(),x(),document.querySelector(".today").addEventListener("click",T),document.querySelector(".upcoming").addEventListener("click",D),document.querySelector(".projects__btn").addEventListener("click",(function t(){this.removeEventListener("click",t);const n=document.querySelector(".projects"),r=document.createElement("button");r.classList.add("projects__btn","projects__btn--close"),r.textContent="x",r.addEventListener("click",(()=>{n.removeChild(o),n.removeChild(a),n.removeChild(r),this.addEventListener("click",t)}));const o=document.createElement("input");o.setAttribute("type","text"),o.classList.add("projects__name-input"),n.appendChild(o);const a=document.createElement("button");r.classList.add("projects__btn","projects__btn--submit"),n.appendChild(r),a.textContent="Ok",n.appendChild(a),a.addEventListener("click",(()=>{let r=o.value;r&&r.length<16&&!w(r)?(n.removeChild(o),n.removeChild(a),document.querySelector(".create-button").textContent="",document.querySelector(".project-name").textContent=r,function(t){let n=new e(t);if(E.push(n),document.querySelector(".content").textContent="",q(n),localStorage.setItem("projects",JSON.stringify(E)),"Inbox"==t)return n;x()}(r),this.addEventListener("click",t)):1==w(r)?(alert("Project names should be different"),o.value=""):r.length>=16?alert("Project name should be less than 16 characters"):r||alert("Enter project name")}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,